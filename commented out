
/*
//SEARCH INPUT LOCATION function
    getInputLocation = async() => {
        let {status} = await Permissions.askAsync(Permissions.LOCATION) 
        
        if(status !== 'granted'){
            this.setState({
                errorMessage: 'Permission to access location was denied',
            })
        }
        //to get coordinates from a name
        const inputL = (await Location.geocodeAsync(this.state.place))[0]
        //console.log(casa)
        let locationLat = (await Location.geocodeAsync(this.state.place))[0].latitude
        let locationLon = (await Location.geocodeAsync(this.state.place))[0].longitude
        //console.log(locationLat, locationLon)

        this.setState({inputL, locationLat, locationLon, showInput: true})
        
        let url = "https://en.wikipedia.org/w/api.php"
        
        let urlParams = {
            action: "query",
            generator:"geosearch",
            prop: "coordinates|pageimages",
            ggscoord: locationLat + "|" + locationLon,
            format: "json"
        }

        url = url + "?origin=*"

        Object.keys(urlParams).forEach(function(key) {
            url += "&" + key + "=" + urlParams[key]
        })

        fetch(url)
        .then(function(response) { 
            return response.json() 
        })
        .then(function(response) { 
            var pages = response.query.geosearch
            for (var place in pages) {
                console.log(pages[place].title)
            }
        })
        .catch(function(error){
            console.log(error)
        })
    }



const InputLoc = props => {

    let inputLocation = 'Waiting...'

    if(props.errorMessage){
        printed = props.errorMessage
    }else if (props.inputL){
        inputLocation = JSON.stringify(props.inputL)
    }

        return(
            <View>
            <Text>Inserted address {inputLocation} </Text>
            </View>
    );
}
*/



/*
                <View>
                    <InputLoc
                        inputL = {this.state.inputL}
                        />
                </View>
                 onPress={this.getInputLocation}
*/


    //Reverse geocoding to get a name from coordinates
    //let where = (await Location.reverseGeocodeAsync(location.coords))[0].street
    //console.log(where)